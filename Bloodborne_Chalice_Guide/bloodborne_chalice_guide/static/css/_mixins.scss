/*======================MIXINS==========================*/

/**
* Provides a placeholder-type mixin for attention on elements
*
* @author Unknown
*
* @content [The effects to be displayed when the user interacts with the element in some way.]
*
*/

@mixin attention(){
    &:hover,
    &:active,
    &:focus{
    	@content;
    }
}

/**
* Centres an absolute or fixed position element horizontally and responsively
*
* @author Byron V. Houwens
*
* @param {Number} $width (100%) - The width of the element. Necessary.
* @param {String} $position (absolute) - Either absolute or fixed positioning for the element. 
*/

@mixin absoluteCentre ($width: 100%, $position: absolute){
    top:0;
    left:0;
    right:0;
    bottom:0;
    width: $width;
    position: $position;
    margin-left:auto;
    margin-right:auto;
}

/**
* Shortcut for declaring both width and height
*
* @author Hugo Giraudel
*
* @param {Number} $width - The desired width of the element.
* @param {Number} $height ($width) - The desired height, which defaults to the same as the width.
*/

@mixin size ($width, $height: $width){
    width: $width;
    height: $height;
}

/**
* Prefixes things on the fly
*
* @author Hugo Giraudel
*
* @example
* $map: (border-radius: 50%);
* .foo{ 
*   @include prefix($map, webkit moz); // will output prefixed versions of the border-radius declaration
* } 
*
* @param {Map} $map - A key-value map of the property and value you want to prefix
* @param {List} $vendors (webkit moz ms o) - The vendor browsers to prefix
*/

@mixin prefix($map, $vendors: webkit moz ms o){
    @each $prop, $value in $map{
        @if $vendors{
            @each $vendor in $vendors{
                #{"-" + $vendor + "-" + $prop}: #{$value};
	}
        }
        #{$prop}: #{$value}; //else dump everything
   }
}

/**
* Adds syntactic sugar to media query declarations. Instead of declaring unit values
* you're able to declare things like "small", "medium", "large" etc.
*
* @example
* .foo{
*  @include breakpoint(small){
*    width: 100%;
*  }
* }
* //will return
*   @media all and (min-width: 480px){
*     .foo{
*       width: 100%;
*     }
*   }
*
* @content [The content of the breakpoint, or what would be written in the normal media query.]
*
* @author Hugo Giraudel
*
* @param {String} $breakpoint - Which breakpoint to use 
*/

@mixin breakpoint($breakpoint){
   $map : (small: 480px, registration: 600px, medium: 900px, large: 1140px);
  
   @if map-has-key($map, $breakpoint){
   	@media all and (min-width: #{map-get($map, $breakpoint)}){
   		@content;
   	}
   }
   
   @else{
   	@warn "There is no value #{$breakpoint} in the list of breakpoints";
   }
}

/**
* Shortcut mixin for declaring pseudo elements
*
* @author Unknown
*
* @param {String} $el - The pseudo element (either before or after)
* @param {Number} $width - The width of the pseudo element
* @param {Number} $height ($width) - The height of the pseudo element
*
* @content [The remaining contents of the pseudo elements] 
*/

@mixin pseudo($el, $width, $height:$width){
   @if ($el == before or $el == after){
   &:#{$el}{
   	@extend %pseudo;
   	width: $width;
   	height: $height;
   	@content;
   }
   }@else{
   	@warn "#{$el} is not a valid pseudo element. Pick 'before' or 'after'";
   }
}

/**
* Reduces multiple spritesheet declarations to a single line. Hit the link for more info and an example.
*
* @author Byron V. Houwens
*
* @link https://medium.com/@BHouwens/responsive-spritesheets-with-sass-73d79b892725
*
* @content [Any extra content for the sprites. Background-sizing will be necessary here]
*
* @param {String} $class - The name of the class to output. Will be suffixed with the number of the image and must be in quotes
* @param {Number} $num - The total number of images in the spritesheet
* @param {String} $path - The path to the spritesheet
*/

@mixin sprites($class, $num, $path){
   $num_main: $num - 1;
   $num_final: 100 / $num_main;
   
   @for $i from 1 through $num{
   	#{$class}#{$i}{
   		background: url($path) no-repeat ($i - 1)*percentage($num_final/100) 0;
      @content;
   	}
   }
}
